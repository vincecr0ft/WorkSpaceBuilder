import ROOT
import numpy as np
ROOT.RooMsgService.instance().setGlobalKillBelow(5)

def make_variations(hist):
    np_up = hist.Clone()
    np_down = hist.Clone()
    for b in range(1,np_up.GetNbinsX()+1):
        np_up.SetBinContent(b, np_up.GetBinContent(b) + np_up.GetBinContent(b) * .1 * b)
        np_down.SetBinContent(b, np_down.GetBinContent(b) - np_down.GetBinContent(b) * 0.1 * b)
    return np_up, np_down

def get_workspace(nchannels = 1, nsamples =1, events = 1000, nbins = 1, nnps = 0):
    nevents = events *.9/nbins 
    meas = ROOT.RooStats.HistFactory.Measurement( "meas", "meas" )
    meas.SetPOI( "SignalStrength" )
    meas.SetLumi( 1.0 )
    meas.SetLumiRelErr( 0.02 )
    meas.AddConstantParam( "Lumi" )

    for channel in range(nchannels):
        for sample in range(nsamples):
            chan = ROOT.RooStats.HistFactory.Channel( "Region{}Sample{}".format(channel,sample) )
            chan.SetStatErrorConfig(0.05, "Poisson")
            if sample < 1:
                data_hist = ROOT.TH1D("{}_observed{}".format("signal", channel),"observed", nbins, 0, nbins)
                signal_hist = ROOT.TH1D("{}_above_expected{}".format("signal", channel),"above_expected", nbins, 0, nbins)
                model_hists = [ROOT.TH1D("expected{}sample{}".format(sample, channel),"expected", nbins, 0, nbins) for sample in range(nsamples)]
                flat = np.arrange(nbins)

                for bin in range(nbins):
                    for i in range( int(nevents*.1*(bin+1))):
                        signal_hist.Fill(bin + 0.5)
                        data_hist.Fill(bin + 0.5)
                    for m in model_hists:
                        for i in range( int(nevents/nchannels)):
                            data_hist.Fill(bin + 0.5)
                            m.Fill(bin + 0.5)
                chan.SetData( data_hist )
                models = []
                for s in range(nsamples):
                    model = ROOT.RooStats.HistFactory.Sample( "channel{}model{}".format(channel,s) )
                    model.SetNormalizeByTheory( False )
                    model.SetHisto( model_hists[s] )
                    models.append(model)
                signal = ROOT.RooStats.HistFactory.Sample( "signal" )
                signal.SetNormalizeByTheory( False )
                signal.SetHisto( signal_hist )
                signal.AddNormFactor( "SignalStrength", 1, 0, 3)
            else:
                data_hist = ROOT.TH1D("CR{}observed{}".format(sample,channel),"observed", 1, 0, 1)
                signal_hist = ROOT.TH1D("CR{}above_expected{}".format(sample,channel),"above_expected", 1, 0, 1)
                model_hists = [ROOT.TH1D("CR{}expected{}sample{}".format(sample,channel,s),"expected", 1, 0, 1) for s in range(nsamples)]
                for i in range( int(nevents*.01)):
                    signal_hist.Fill(0.5)
                    data_hist.Fill(0.5)
                for m in range(len(model_hists)):
                    if m == channel:
                        for i in range( int(nevents)):
                            data_hist.Fill(0.5)
                            model_hists[m].Fill(0.5)
                    else:
                        for i in range(int(nevents*0.1)):
                            data_hist.Fill(0.5)
                            model_hists[m].Fill(0.5)
                    

                chan.SetData( data_hist )
                models = []
                for sample in range(nsamples):
                    model = ROOT.RooStats.HistFactory.Sample( "model{}".format(sample) )
                    model.SetNormalizeByTheory( False )
                    model.SetHisto( model_hists[sample] )
                    models.append(model)
                signal = ROOT.RooStats.HistFactory.Sample( "signal" )
                signal.SetNormalizeByTheory( False )
                print "this signal hist is ",signal_hist
                signal.SetHisto( signal_hist )
                signal.AddNormFactor( "SignalStrength", 1, 0, 3)

            
            if nnps > 0:
                for np in range(nnps):
                    print "this uncertainty is {}".format(np)
                    uncertainty_up   = nevents * 1.1
                    uncertainty_down = nevents * 0.9
                    signal.AddOverallSys( "signal_norm_uncertainty_{}".format(np),  uncertainty_down*.1, uncertainty_up*.1 )
                    for model in models:
                        model.AddOverallSys( "background_norm_uncertainty_{}".format(np),  uncertainty_down, uncertainty_up )
                

                    sig_np_up, sig_np_down = make_variations(signal_hist) 
                    signal_shape = ROOT.RooStats.HistFactory.HistoSys("signal_shape_{}".format(np))
                    signal_shape.SetHistoHigh( sig_np_up )
                    signal_shape.SetHistoLow( sig_np_down )
                    signal.AddHistoSys( signal_shape )
                    for bkg in range(nsamples):
                        background_shape = ROOT.RooStats.HistFactory.HistoSys("background_{}_shape_{}".format(bkg,np))
                        bkg_np_up, bkg_np_down = make_variations(model_hists[bkg])
                        background_shape.SetHistoHigh( bkg_np_up )
                        background_shape.SetHistoLow( bkg_np_down )
                        models[bkg].AddHistoSys( background_shape )

            for model in models:
                chan.AddSample( model )
            chan.AddSample( signal )
            meas.AddChannel( chan )


    hist2workspace = ROOT.RooStats.HistFactory.HistoToWorkspaceFactoryFast(meas)
    if nchannels < 1 and nsamples < 1:
        ws = hist2workspace.MakeSingleChannelModel( meas, chan )
    else:
        ws = hist2workspace.MakeCombinedModel(meas)
    iter = ws.components().fwdIterator()
    arg = iter.next()
    while arg:
        if "RooRealSum" in str(arg.IsA()):
            arg.setAttribute("BinnedLikelihood")
        arg = iter.next()
    return ws
